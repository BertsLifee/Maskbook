diff --git a/dist/index.d.mts b/dist/index.d.mts
new file mode 100644
index 0000000000000000000000000000000000000000..fb5ceccffbb026492e4bb6a75b78e2f68d09b962
--- /dev/null
+++ b/dist/index.d.mts
@@ -0,0 +1,142 @@
+import { IStringifyOptions } from 'qs';
+
+type ParamMap = Record<string, any>;
+type UrlCatConfiguration = Partial<Pick<IStringifyOptions, 'arrayFormat'> & {
+    objectFormat: Partial<Pick<IStringifyOptions, 'format'>>;
+}>;
+/**
+ * Builds a URL using the base template and specified parameters.
+ *
+ * @param {String} baseTemplate a URL template that contains zero or more :params
+ * @param {Object} params an object with properties that correspond to the :params
+ *   in the base template. Unused properties become query params.
+ *
+ * @returns {String} a URL with path params substituted and query params appended
+ *
+ * @example
+ * ```ts
+ * urlcat('http://api.example.com/users/:id', { id: 42, search: 'foo' })
+ * // -> 'http://api.example.com/users/42?search=foo
+ * ```
+ */
+declare function urlcat(baseTemplate: string, params: ParamMap): string;
+/**
+ * Concatenates the base URL and the path specified using '/' as a separator.
+ * If a '/' occurs at the concatenation boundary in either parameter, it is removed.
+ *
+ * @param {String} baseUrl the first part of the URL
+ * @param {String} path the second part of the URL
+ *
+ * @returns {String} the result of the concatenation
+ *
+ * @example
+ * ```ts
+ * urlcat('http://api.example.com/', '/users')
+ * // -> 'http://api.example.com/users
+ * ```
+ */
+declare function urlcat(baseUrl: string, path: string): string;
+/**
+ * Concatenates the base URL and the path specified using '/' as a separator.
+ * If a '/' occurs at the concatenation boundary in either parameter, it is removed.
+ * Substitutes path parameters with the properties of the @see params object and appends
+ * unused properties in the path as query params.
+ *
+ * @param {String} baseUrl the first part of the URL
+ * @param {String} path the second part of the URL
+ * @param {Object} params Object with properties that correspond to the :params
+ *   in the base template. Unused properties become query params.
+ *
+ * @returns {String} URL with path params substituted and query params appended
+ *
+ * @example
+ * ```ts
+ * urlcat('http://api.example.com/', '/users/:id', { id: 42, search: 'foo' })
+ * // -> 'http://api.example.com/users/42?search=foo
+ * ```
+ */
+declare function urlcat(baseUrl: string, pathTemplate: string, params: ParamMap): string;
+/**
+ * Concatenates the base URL and the path specified using '/' as a separator.
+ * If a '/' occurs at the concatenation boundary in either parameter, it is removed.
+ * Substitutes path parameters with the properties of the @see params object and appends
+ * unused properties in the path as query params.
+ *
+ * @param {String} baseUrl the first part of the URL
+ * @param {String} path the second part of the URL
+ * @param {Object} params Object with properties that correspond to the :params
+ *   in the base template. Unused properties become query params.
+ * @param {Object} config urlcat configuration object
+ *
+ * @returns {String} URL with path params substituted and query params appended
+ *
+ * @example
+ * ```ts
+ * urlcat('http://api.example.com/', '/users/:id', { id: 42, search: 'foo' }, {objectFormat: {format: 'RFC1738'}})
+ * // -> 'http://api.example.com/users/42?search=foo
+ * ```
+ */
+declare function urlcat(baseUrlOrTemplate: string, pathTemplateOrParams: string | ParamMap, maybeParams: ParamMap, config: UrlCatConfiguration): string;
+/**
+ * Factory function providing a pre configured urlcat function
+ *
+ * @param {Object} config Configuration object for urlcat
+ *
+ * @returns {Function} urlcat decorator function
+ *
+ * @example
+ * ```ts
+ * configure({arrayFormat: 'brackets', objectFormat: {format: 'RFC1738'}})
+ * ```
+ */
+declare function configure(rootConfig: UrlCatConfiguration): (baseUrlOrTemplate: string, pathTemplateOrParams: string | ParamMap, maybeParams?: ParamMap, config?: UrlCatConfiguration) => string;
+/**
+ * Creates a query string from the specified object.
+ *
+ * @param {Object} params an object to convert into a query string.
+ * @param {Object} config configuration to stringify the query params.
+ *
+ * @returns {String} Query string.
+ *
+ * @example
+ * ```ts
+ * query({ id: 42, search: 'foo' })
+ * // -> 'id=42&search=foo'
+ * ```
+ */
+declare function query(params: ParamMap, config?: UrlCatConfiguration): string;
+/**
+ * Substitutes :params in a template with property values of an object.
+ *
+ * @param {String} template a string that contains :params.
+ * @param {Object} params an object with keys that correspond to the params in the template.
+ *
+ * @returns {String} Rendered path after substitution.
+ *
+ * @example
+ * ```ts
+ * subst('/users/:id/posts/:postId', { id: 42, postId: 36 })
+ * // -> '/users/42/posts/36'
+ * ```
+ */
+declare function subst(template: string, params: ParamMap): string;
+/**
+ * Joins two strings using a separator.
+ * If the separator occurs at the concatenation boundary in either of the strings, it is removed.
+ * This prevents accidental duplication of the separator.
+ *
+ * @param {String} part1 First string.
+ * @param {String} separator Separator used for joining.
+ * @param {String} part2 Second string.
+ *
+ * @returns {String} Joined string.
+ *
+ * @example
+ * ```ts
+ * join('first/', '/', '/second')
+ * // -> 'first/second'
+ * ```
+ */
+declare function join(part1: string, separator: string, part2: string): string;
+
+export { ParamMap, UrlCatConfiguration, configure, urlcat as default, join, query, subst };
diff --git a/package.json b/package.json
index 6c09937ee7c032c4cbdf8cae86d3ec7603b8a826..54675541f364d60f479a2b854e07921774b1d1f6 100644
--- a/package.json
+++ b/package.json
@@ -11,8 +11,14 @@
   "types": "dist/index.d.ts",
   "exports": {
     ".": {
-      "import": "./dist/index.mjs",
-      "require": "./dist/index.js"
+      "import": {
+        "types": "./dist/index.d.mts",
+        "default": "./dist/index.mjs"
+      },
+      "require": {
+        "types": "./dist/index.d.ts",
+        "default": "./dist/index.js"
+      }
     },
     "./package.json": "./package.json"
   },